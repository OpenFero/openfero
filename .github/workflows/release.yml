# .github/workflows/release.yml
name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "New tag"
        required: true
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

permissions:
  contents: read

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      prev_tag: ${{ steps.prev_tag.outputs.prev_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set tag
        id: tag
        run: |
          TAG="${{ github.event.inputs.tag }}"
          # If tag is provided via workflow_dispatch, use it
          # Otherwise use the tag from the push event
          if [ -z "$TAG" ]; then
            TAG=$(echo "${{ github.ref }}" | sed 's|refs/tags/||')
          fi
          echo "tag=${TAG}" >> "${GITHUB_OUTPUT}"

      - name: Set GORELEASER_PREVIOUS_TAG
        id: prev_tag
        if: ${{ !contains(github.ref, '-nightly') }}
        # find previous tag by filtering out nightly tags and choosing the
        # second to last tag (last one is the current release)
        # needs to be executed before new release tag is create otherwise the new release tag to be built will be returned
        run: |
          prev_tag=$(git tag -l | sed 's/^v//' | sort -V | grep -Ev "(nightly|latest)" | tail -n 1)
          echo "prev_tag=${prev_tag}" >> "${GITHUB_OUTPUT}"

  goreleaser-amd64:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      GORELEASER_PREVIOUS_TAG: ${{ needs.setup.outputs.prev_tag }}
      GORELEASER_CURRENT_TAG: ${{ needs.setup.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: "go.mod"

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: git tag ${{ env.GORELEASER_CURRENT_TAG }}
        if: ${{ github.event.inputs.tag != '' }}

      - name: Run GoReleaser for AMD64
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean --id amd64 --skip=sign,sbom,announce,publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  goreleaser-arm64:
    needs: setup
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
      packages: write
    env:
      GORELEASER_PREVIOUS_TAG: ${{ needs.setup.outputs.prev_tag }}
      GORELEASER_CURRENT_TAG: ${{ needs.setup.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: "go.mod"

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: git tag ${{ env.GORELEASER_CURRENT_TAG }}
        if: ${{ github.event.inputs.tag != '' }}

      - name: Run GoReleaser for ARM64
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean --id arm64 --skip=sign,sbom,announce,publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  finalize-release:
    needs: [setup, goreleaser-amd64, goreleaser-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Create Docker Manifest
        run: |
          TAG="${{ needs.setup.outputs.tag }}"
          echo "Creating manifest for tag: ${TAG}"

          # Log into GHCR
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Create and push version manifest
          docker manifest create "ghcr.io/openfero/openfero:${TAG}" \
            "ghcr.io/openfero/openfero:${TAG}-amd64" \
            "ghcr.io/openfero/openfero:${TAG}-arm64"
          docker manifest push "ghcr.io/openfero/openfero:${TAG}"

          # Create and push latest manifest
          docker manifest create "ghcr.io/openfero/openfero:latest" \
            "ghcr.io/openfero/openfero:${TAG}-amd64" \
            "ghcr.io/openfero/openfero:${TAG}-arm64"
          docker manifest push "ghcr.io/openfero/openfero:latest"

      - name: Package charts
        id: chart-releaser
        if: ${{ !contains(github.ref, '-nightly') }}
        run: |
          # Get current version and calculate new patch version
          CURRENT_VERSION=$(grep '^version:' charts/openfero/Chart.yaml | awk '{print $2}')
          MAJOR=$(echo "${CURRENT_VERSION}" | cut -d. -f1)
          MINOR=$(echo "${CURRENT_VERSION}" | cut -d. -f2)
          PATCH=$(echo "${CURRENT_VERSION}" | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "NEW_VERSION=${NEW_VERSION}" >> "${GITHUB_ENV}"

          # Update both version and appVersion
          sed -i "s/^version: .*/version: ${NEW_VERSION}/g" charts/openfero/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: ${{ needs.setup.outputs.tag }}/g" charts/openfero/Chart.yaml

          helm package charts/* --destination .cr-release-packages

      - name: Push charts to GHCR
        id: push-charts
        if: ${{ !contains(github.ref, '-nightly') }}
        run: |
          shopt -s nullglob
          for pkg in .cr-release-packages/*; do
            if [ -z "${pkg:-}" ]; then
              break
            fi
            helm push "${pkg}" "oci://ghcr.io/openfero/openfero/charts"
          done

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        if: ${{ !contains(github.ref, '-nightly') }}
        with:
          commit-message: Bump chart version to ${{ env.NEW_VERSION }}
          title: Bump chart version to ${{ env.NEW_VERSION }}
          body: |
            Updates the Helm chart version for release ${{ needs.setup.outputs.tag }}
          branch: bump-chart-${{ env.NEW_VERSION }}
          base: ${{ github.ref_name }}
          add-paths: charts/openfero/Chart.yaml
          delete-branch: true
